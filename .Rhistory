connections <- rbind(connections_quote, connections_pm, connections_thank);
# Make fromuser always less than touser
# and elliminate self link
getOneWayLink <- function(connections) {
tmp <- integer(length(fromusers));
index <- connections$fromuser > connections$touser;
tmp[index] <- connections$fromuser[index];
connections$fromuser[index] <- connections$touser[index];
connections$touser[index] <- tmp[index];
return (connections);
}
generateLinks <- function(nodes, connections, counts) {
connections <- getOneWayLink(connections);
connections <- connections[with(connections, order(fromuser, touser)), ];
fromusers <- connections$fromuser;
tousers <- connections$touser;
size <- nrow(connections);
row <- 1;
while (row <= size) {
curFromuser <- fromusers[row];
curTouser <- tousers[row];
curRow <- row;
while (row <= size && fromusers[row] == curFromuser && tousers[row] == curTouser) {
row <- row + 1;
counts[curRow] <- counts[curRow] + 1;
}
fromusers[curRow] <- which(nodes == curFromuser)-1;
tousers[curRow] <- which(nodes == curTouser)-1;
}
links <- data.frame(source = fromusers, target = tousers,
value = counts, group = connections$group);
return (links[links$value>0, ]);
}
counts <- rep(0, nrow(connections));
links <- generateLinks(nodes, connections, counts);
# Elliminating abnormal data
write.table(nodes, file="csv/network_nodes.csv", row.names=FALSE, col.names=c("name"));
write.csv(links, file="csv/network_links.csv", row.names=FALSE);
nodes <- nodes[nodes!=18936 & nodes!= 18957 $ nodes!=18950];
nodes <- nodes[nodes != 18936 & nodes != 18957 & nodes != 18950];
nodes <- userids[match];
nodes <- nodes[order(nodes)]
nodes <- nodes[nodes != 18936 & nodes != 18957 & nodes != 18950];
connections <- connections[connections$fromuser != 18936 & connections$touser != 18936 &
connections$fromuser != 18957 & connections$touser != 18957 &
connections$fromuser != 18950 & connections$touser != 18950];
connections <- connections[connections$fromuser != 18936 & connections$touser != 18936];
connections <- connections[connections$fromuser != 18936];
connections <- connections[connections$fromuser != 18936 & connections$touser != 18936 &
connections$fromuser != 18957 & connections$touser != 18957 &
connections$fromuser != 18950 & connections$touser != 18950, ];
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
nodes <- userids[match];
nodes <- nodes[order(nodes)]
toDelete = c(18936, 18957, 18950);
deleteNodes <- function(nodes, toDelete) {
for (item in 1:length(toDelete)) {
nodes <- nodes[nodes != toDelete]
}
}
nodes <- deleteNodes(nodes, toDelete);
nodes <- userids[match];
nodes <- nodes[order(nodes)]
deleteNodes <- function(nodes, toDelete) {
for (item in 1:length(toDelete)) {
nodes <- nodes[nodes != toDelete[item]]
}
}
nodes <- deleteNodes(nodes, toDelete);
toDelete[0]
toDelete[1]
nodes != 18936
nodes
nodes <- userids[match];
nodes <- nodes[order(nodes)]
nodes != 18936
deleteNodes <- function(nodes, toDelete) {
for (item in 1:length(toDelete)) {
nodes <- nodes[nodes != toDelete[item]]
}
}
nodes <- deleteNodes(nodes, toDelete);
nodes <- userids[match];
nodes <- nodes[order(nodes)]
# Elliminating abnormal data
toDelete = c(18936, 18957, 18950);
deleteNodes <- function(nodes, toDelete) {
for (item in 1:length(toDelete)) {
nodes <- nodes[nodes != toDelete[item]]
}
return (nodes);
}
nodes <- deleteNodes(nodes, toDelete);
deleteConnections <- function(connections, toDelete) {
for (item in 1:length(toDelete)) {
connections <- connections[connections$fromuser != toDelete[item]];
connections <- connections[connections$touser != toDelete[item]];
}
return (connections);
}
connections <- deleteConnections(connections, toDelete);
deleteConnections <- function(connections, toDelete) {
for (item in 1:length(toDelete)) {
connections <- connections[connections$fromuser != toDelete[item], ];
connections <- connections[connections$touser != toDelete[item], ];
}
return (connections);
}
connections <- deleteConnections(connections, toDelete);
connections <- rbind(connections_quote, connections_pm, connections_thank);
connections <- deleteConnections(connections, toDelete);
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
generateRByConnectionStrength <- function(links) {
strength <- integer(length(nodes));
sources <- links$source;
targets <- links$target;
values <- links$value;
size <- nrow(links)
for (row in 1:size) {
strength[sources[row]] <- strength[sources[row]] + values[row];
strength[targets[row]] <- strength[targets[row]] + values[row];
}
return strength;
}
generateRByConnectionStrength <- function(links) {
strength <- integer(length(nodes));
sources <- links$source;
targets <- links$target;
values <- links$value;
size <- nrow(links)
for (row in 1:size) {
strength[sources[row]] <- strength[sources[row]] + values[row];
strength[targets[row]] <- strength[targets[row]] + values[row];
}
return (strength);
}
tmp <- strength;
tmp <- generateRByConnectionStrength(links);
sum(tmp)
table(tmp)
summary(tmp)
max(tmp)
which(tmp==max(tmp))
tmp[tmp==max(tmp)]
nodes[tmp==max(tmp)]
links[source==14114,]
links[source==2955,]
links[links$source==2955,]
which(tmp==max(tmp))
tmp[tmp==max(tmp)]
connections[connections$fromuser==7150,]
connections[connections$touser==7150,]
summary(tmp)
tmp[tmp==7150]
which(tmp==7150)
connections[connections$fromuser==nodes[2955],]
connections[connections$touser==nodes[2955],]
length(connections[connections$touser==nodes[2955],])
nrow(connections[connections$touser==nodes[2955],])
nrow(connections[connections$fromuser==nodes[2955],])
summary(tmp)
links[links$source==2955,]
nrow(links[links$source==2955,])
nrow(links[links$target==2955,])
connections <- getOneWayLink(connections);
connections <- connections[with(connections, order(fromuser, touser)), ];
View(connections)
sum(connections$fromuser > connections$touser)
links <- generateLinks(nodes, connections, counts);
sum(links$value)
tmp <- generateRByConnectionStrength(links);
sum(tmp)
325489*2
generateStrengthByConnection <- function(links) {
strength <- integer(length(nodes));
sources <- links$source;
targets <- links$target;
values <- links$value;
size <- nrow(links);
for (row in 1:size) {
strength[sources[row]] <- strength[sources[row]] + values[row];
strength[targets[row]] <- strength[targets[row]] + values[row];
}
return (strength);
}
tmp <- generateStrengthByConnection(links);
sum(links$value)
tmp
sum(tmp)
tmp
sum(tmp)
sum(links$value)
nrow(links)
links$value==0
sum(links$value==0)
generateStrengthByConnection <- function(links) {
strength <- integer(length(nodes));
sources <- links$source;
targets <- links$target;
values <- links$value;
size <- nrow(links);
for (row in 1:size) {
strength[sources[row]] <- strength[sources[row]] + values[row];
strength[sources[row]] <- strength[sources[row]] + values[row];
}
return (strength);
}
tmp <- generateStrengthByConnection(links);
sum(tmp)
sum(links$value)
debugSource('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
sum(values)
generateStrengthByConnection <- function(links) {
strength <- integer(length(nodes));
sources <- links$source + 1;
targets <- links$target + 1;
values <- links$value;
size <- nrow(links);
for (row in 1:size) {
strength[sources[row]] <- strength[sources[row]] + values[row];
strength[targets[row]] <- strength[targets[row]] + values[row];
}
return (strength);
}
tmp <- generateStrengthByConnection(links);
sum(tmp)
summary(tmp)
which(tmp==7150)
nodes[2956]
toDelete = c(18936, 18957, 18950, # only connections among themselves
14116);  # system messages
nodes <- deleteNodes(nodes, toDelete);
connections <- rbind(connections_quote, connections_pm, connections_thank);
connections <- deleteConnections(connections, toDelete);
counts <- rep(0, nrow(connections));
links <- generateLinks(nodes, connections, counts);
deleteUnusedUserid <- function(userids) {
match <- rep(FALSE, length(userids));
match <- markUsedID(table_quote, userids, match);
match <- markUsedID(table_pm, userids, match);
match <- markUsedID(table_thank, userids, match);
markUsedID <- function(table, userids, match) {
match <- markUsedIDAux(table$fromuser, userids, match);
match <- markUsedIDAux(table$touser, userids, match);
}
markUsedIDAux <- function(ids, userids, match) {
size <- length(ids);
for (row in 1:size) {
if (which(userids == ids[row]) > 0)
match[which(userids == ids[row])] = TRUE;
}
return (match);
}
}
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
sum(links$value)
tmp <- generateStrengthByConnection(links);
summary(tmp)
which(tmp==4523)
nodes[814]
order(tmp, decreasing=TRUE)[1:10]
order(-tmp)[1:10]
order(tmp)[1:10]
head(tmp[order(tmp)], 10)
head(tmp[order(-tmp)], 10)
head(tmp[order(-tmp)], 100)
head(tmp[order(-tmp)], 300)
summary(tmp)
quantile(tmp, c(0.8, 1))
quantile(tmp, c(0.9, 1))
quantile(tmp, c(0.95, 1))
quantile(tmp, 0.95)
sum(tmp>quantile(tmp, 0.95))
sum(tmp>quantile(tmp, 0.97))
sum(tmp>quantile(tmp, 0.98))
ss <- reshape::rescaler.default(tmp, type = "range")
scale <- function(data) {
qt <- 0.80;
while (quantile(data, qt) > 100) {
qt <- qt + 0.01;
}
qt <- qt - 0.01;
return (qt);
}
scale(tmp)
summary(tmp)
quantile(tmp, 0.8)
quantile(tmp, 0.8) > 100
tmp <- generateStrengthByConnection(nodes, links);
generateStrengthByConnection <- function(nodes, links) {
strength <- integer(length(nodes));
# Careful: start index differ
sources <- links$source + 1;
targets <- links$target + 1;
values <- links$value;
size <- nrow(links);
for (row in 1:size) {
strength[sources[row]] <- strength[sources[row]] + values[row];
strength[targets[row]] <- strength[targets[row]] + values[row];
}
r <- integer(length(nodes));
return (strength);
}
tmp <- generateStrengthByConnection(nodes, links);
summary(tmp)
quantile(tmp, 0.8)
scale <- function(data) {
qt <- 0.80;
while (sum(quantile(data, qt)) > 100) {
qt <- qt + 0.01;
}
qt <- qt - 0.01;
return (qt);
}
scale(tmp)
sum(quantile(tmp, 0.8)
)
quantile(tmp, 0.8)
100/lenth(data)
100/lenth(tmp)
100/length(tmp)
1-100/length(tmp)
quantile(data, 0.983716)
quantile(tmp, 0.983716)
sum(tmp>quantile(tmp, 0.983716))
scale <- function(data, num, range_min, range_max) {
qt <- 1 - num/length(data);
min <- quantile(data, qt);
max <- max(data);
r <- numeric(length(data));
r[data < min] <- 0;
r[data > min] <- (r[data > min] - min) / (max - min) *
(range_max - range_min) + range_min;
return (r);
}
rr <- scale(tmp)
rr <- scale(tmp, 100, 5, 20)
rr
rr[rr>0]
scale <- function(data, num, range_min, range_max) {
qt <- 1 - num/length(data);
min <- quantile(data, qt);
max <- max(data);
r <- numeric(length(data));
r[data < min] <- 0;
r[data > min] <- (data[data > min] - min) / (max - min) *
(range_max - range_min) + range_min;
return (r);
}
rr <- scale(tmp)
rr <- scale(tmp, 100, 5, 20)
rr[rr>0]
rr[rr==5]
rr[rr<5.5]
rr[rr<5.5 $ rr>0]
rr[rr<5.5 & rr>0]
strength <- generateStrengthByConnection(nodes, links);
links$r <- scale(tmp, 100, 5, 20)
nodes$r <- scale(tmp, 100, 5, 20)
nodes
nodes <- generateNodes();
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
sum(links$value)
strength <- generateStrengthByConnection(nodes, links);
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
write.table(nodes, file="csv/network_nodes.csv", row.names=FALSE, col.names=c("name"));
write.csv(links, file="csv/network_links.csv", row.names=FALSE);
write.csv(nodes, file="csv/network_nodes.csv", row.names=FALSE);
scale <- function(data, num, range_min, range_max) {
qt <- 1 - num/length(data);
min <- quantile(data, qt);
max <- max(data);
r <- numeric(length(data));
r[data < min] <- 0;
r[data > min] <- round((data[data > min] - min) / (max - min) *
(range_max - range_min) + range_min, 2);
return (r);
}
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
r <- scale(strength, 100, 5, 20));
nodes <- data.frame(name = IDs, r = r);
r <- scale(strength, 100, 5, 20));
r <- scale(strength, 100, 5, 20);
nodes <- data.frame(name = IDs, r = r);
write.csv(nodes, file="csv/network_nodes.csv", row.names=FALSE);
write.csv(links, file="csv/network_links.csv", row.names=FALSE);
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
r <- scale(strength, 100, 10, 50);
nodes <- data.frame(name = IDs, r = r);
write.csv(nodes, file="csv/network_nodes.csv", row.names=FALSE);
sum(strength)
filterIDByStrength <- function(IDs, strength, num) {
qt <- 1 - num/length(IDs);
min <- quantile(IDs, qt)
return (IDs[IDs > min]);
}
filtered_IDs <- filterIDByStrength(IDs, strength, 100);
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
filtered_links <- generateLinks(filtered_IDs, connections);
a <- c(1,2,3)
t <- which(a==4)
length(t)
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
t <- which(a==3)
length(t)
debugSource('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
head(curFromuser)
debugSource('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
strength <- generateStrengthByConnection(IDs, links);
debugSource('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
strength <- generateStrengthByConnection(IDs, links);
nodes <- data.frame(name = IDs, r = strength);
nodes <- filterIDByStrength(nodes, strength, 100);
nodes$r <- scale(nodes$r, 10, 50);
strength <- generateStrengthByConnection(IDs, links);
nodes <- data.frame(name = IDs, r = strength);
nodes <- filterIDByStrength(nodes, strength, 100);
IDs <- nodes$name;
qt <- 1 - num/length(IDs);
num = 100
qt <- 1 - num/length(IDs);
min <- quantile(strength, qt)
min
nodes[strength > min, ]
nodes <- filterIDByStrength(nodes, strength, 100);
debugSource('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
quantile(strength, qt)
strength > min
nodes <- data.frame(name = IDs, r = strength);
filtered_nodes <- filterIDByStrength(nodes, strength, 100);
filtered_nodes$r <- scale(filtered_nodes$r, 10, 50);
debugSource('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
round((data[data > min] - min) / (max - min) *
(range_max - range_min) + range_min, 2);
round((data - min) / (max - min) *
(range_max - range_min) + range_min, 2);
round((data - min) / (max - min) *
(range_max - range_min) + range_min, 2) ==0;
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
filtered_links <- generateLinks(filtered_nodes$name, connections);
write.csv(filtered_nodes, file="csv/network_nodes.csv", row.names=FALSE);
write.csv(filtered_links, file="csv/network_links.csv", row.names=FALSE);
install.packages("networkD3")
library(networkD3)
simpleNetwork(filtered_links);
forceNetwork(Links = filtered_links, Nodes = filtered_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
forceNetwork(Links = filtered_links, Nodes = filtered_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
opacity = 0.8)
filtered_nodes$group <- 1;
forceNetwork(Links = filtered_links, Nodes = filtered_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
forceNetwork(Links = filtered_links, Nodes = filtered_nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8, zoom=TRUE)
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
nodes$r <- strength;
nodes$r <- scale(nodes$r, 100, 10, 50);
scale <- function(data, kept_amount, range_min, range_max) {
qt <- 1 - kept_amount/length(data);
min <- quantile(data, qt);
max <- max(data);
r <- numeric(length(data));
r[data < min] <- 0;
r[data > min] <- round((data[data > min] - min) / (max - min) *
(range_max - range_min) + range_min, 2);
return (r);
}
nodes$r <- scale(nodes$r, 100, 10, 50);
write.csv(nodes, file="csv/network_nodes.csv", row.names=FALSE);
write.csv(links, file="csv/network_links.csv", row.names=FALSE);
source('~/Library/Mobile Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/Information Visulization/Project/network.R')
filtered_nodes <- filterIDByStrength(nodes, strength, 1000);
filtered_nodes$r <- scale(filtered_nodes$r, 10, 50);
filtered_links <- generateLinks(filtered_nodes$name, connections);
scale <- function(data, range_min, range_max) {
min <- min(data);
max <- max(data);
r <- round((data - min) / (max - min) *
(range_max - range_min) + range_min, 2);
r[r<0] = 0;
return (r);
}
filtered_nodes <- filterIDByStrength(nodes, strength, 1000);
filtered_nodes$r <- scale(filtered_nodes$r, 10, 50);
filtered_links <- generateLinks(filtered_nodes$name, connections);
write.csv(filtered_nodes, file="csv/network_nodes.csv", row.names=FALSE);
write.csv(filtered_links, file="csv/network_links.csv", row.names=FALSE);
filtered_nodes <- filterIDByStrength(nodes, strength, 200);
filtered_nodes$r <- scale(filtered_nodes$r, 10, 50);
filtered_links <- generateLinks(filtered_nodes$name, connections);
write.csv(filtered_nodes, file="csv/network_nodes.csv", row.names=FALSE);
write.csv(filtered_links, file="csv/network_links.csv", row.names=FALSE);
filtered_nodes <- filterIDByStrength(nodes, strength, 100);
filtered_nodes$r <- scale(filtered_nodes$r, 10, 50);
filtered_links <- generateLinks(filtered_nodes$name, connections);
write.csv(filtered_nodes, file="csv/network_nodes.csv", row.names=FALSE);
write.csv(filtered_links, file="csv/network_links.csv", row.names=FALSE);
